<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>列表初始化的内部机制</title>
    <link href="/2023/06/26/initializer_list/"/>
    <url>/2023/06/26/initializer_list/</url>
    
    <content type="html"><![CDATA[<h3 id="1-列表初始化的内部机制———initializer-list-lt-T-gt"><a href="#1-列表初始化的内部机制———initializer-list-lt-T-gt" class="headerlink" title="1.列表初始化的内部机制———initializer_list&lt;T&gt;"></a>1.列表初始化的内部机制———initializer_list&lt;T&gt;</h3><p>我们在使用定义的类和标准库容器时，有时会用到花括号进行初始化   </p><p>定义一个类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">int</span> b;<br>&#125;;<br></code></pre></td></tr></table></figure><p>创建一个类对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">A a1&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;             \\进行列表初始化<br>A a2&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;           \\error:无法从initialist_list转化为A<br>vector&lt;<span class="hljs-type">int</span>&gt; v1&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;   \\对容器进行<br>vector&lt;<span class="hljs-type">int</span>&gt; v2&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;  \\放进不同数量的实参<br></code></pre></td></tr></table></figure><p>从上面我们可以看出所谓的列表初始化就是利用标准库类型<code>initializer_list&lt;T&gt;</code>（即可变参数模板）然后进行类中构造函数创建一个对象，没有自定义的话会有一个生成的默认的。</p><p>以下是这个类模板的源码链接，与gcc-4.92的源码有十分甚至九分的相似   </p><p><a href="https://zh.cppreference.com/w/cpp/header/initializer_list">cppreference</a>  </p><p>想vector等stl库里的容器都有一个写好的以initializer_list为实参的构造函数，如上面的源码    </p><pre><code class="hljs">  vector(initializer_list&lt;value_type&gt; __l,       const allocator_type&amp; __a = allocator_type()):...  &#123;...&#125;  list(initializer_list&lt;value_type&gt; __l,       const allocator_type&amp; __a = allocator_type()):...       &#123; ... &#125;  //deque，forward_list等容器也有相同的构造函数     </code></pre><p>但是我还是想看一下<strong>visual studio</strong>关于<code>initializer_list&lt;T&gt;</code>里面的源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">_CONSTEXPR20_CONTAINER <span class="hljs-title">vector</span><span class="hljs-params">(initializer_list&lt;_Ty&gt; _Ilist, <span class="hljs-type">const</span> _Alloc&amp; _Al = _Alloc())</span></span><br><span class="hljs-function">        : _Mypair(_One_then_variadic_args_t&#123;</span>&#125;, _Al) &#123;<br>        <span class="hljs-keyword">auto</span>&amp;&amp; _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());<br>        _Container_proxy_ptr&lt;_Alty&gt; _Proxy(_Alproxy, _Mypair._Myval2);<br>        _Range_construct_or_tidy(_Ilist.<span class="hljs-built_in">begin</span>(), _Ilist.<span class="hljs-built_in">end</span>(), random_access_iterator_tag&#123;&#125;);<br>        _Proxy._Release();<br>    &#125;<br></code></pre></td></tr></table></figure><p>hhh，vs写成这样真的能看出他在写什么吗😅  </p><ul><li>[X]想翻译一下，但是没啥时间，而且有调用和宏太多了，找时间再说   </li><li>[√]只是测试一下markdown语法，顺便打打代码</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/22/hello-world/"/>
    <url>/2023/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么要弄一个个人博客捏"><a href="#为什么要弄一个个人博客捏" class="headerlink" title="为什么要弄一个个人博客捏"></a>为什么要弄一个个人博客捏</h3><p>用来记录一下学习过程中收获到的知识和感悟，顺便加深一下印象，如果有一些生活中的个人感悟的话也会发一篇文章，主要是学习计算机相关的内容。(其实是看见很多大佬有个人blog，看起来好强的样子，所以也想有一个，感觉很帅气)</p>]]></content>
    
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
